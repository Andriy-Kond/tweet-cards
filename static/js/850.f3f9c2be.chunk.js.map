{"version":3,"file":"static/js/850.f3f9c2be.chunk.js","mappings":"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","sources":["webpack://tweet-cards/./src/components/MarkupTweets/MarkupTweets.module.css?a5af","redux/selectors.js","components/MarkupTweets/MarkupTweets.jsx","webpack://tweet-cards/./src/components/RenderTweets/RenderTweets.module.css?ae95","components/RenderTweets/RenderTweets.jsx","webpack://tweet-cards/./src/Layout/PaginationList/PaginationList.module.css?f95d","Layout/PaginationList/PaginationList.jsx","components/TweetCards/TweetCards.jsx","components/Dropdown/Dropdown.jsx","webpack://tweet-cards/./src/pages/Tweets/TweetsPage.module.css?b6bc","pages/Tweets/TweetsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"MarkupTweets_listItem__83Amm\",\"title\":\"MarkupTweets_title__rpG10\",\"tweets\":\"MarkupTweets_tweets__PThrx\",\"followers\":\"MarkupTweets_followers__k8S1N\",\"btn\":\"MarkupTweets_btn__AWbfJ\",\"line\":\"MarkupTweets_line__p0c+m\",\"avatar\":\"MarkupTweets_avatar__xkZQG\",\"circle\":\"MarkupTweets_circle__8szMi\",\"logo\":\"MarkupTweets_logo__E+LPg\",\"messages\":\"MarkupTweets_messages__FbW1I\"};","export const selectUserKeys = store => store.storeUserKey.stateUserKeys;\nexport const selectFilteredTweets = store =>\n  store.storeUserKey.stateFilteredTweets;\nexport const selectAllTweets = store => store.storeUserKey.stateAllTweets;\nexport const selectUsersFilter = store => store.storeUserKey.stateUsersFilter;\nexport const selectCurrentPage = store => store.storeUserKey.stateCurrentPage;\nexport const selectTotalPages = store => store.storeUserKey.stateTotalPages;\n","import css from './MarkupTweets.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilteredTweets, toggleUserSubscribe } from 'redux/sliceUserKey';\nimport { selectUserKeys } from 'redux/selectors';\nimport { useState } from 'react';\nimport {\n  FOLLOW,\n  FOLLOWING,\n  PRIMARY_COLOR,\n  SECONDARY_COLOR,\n} from 'Services/variables';\nimport { useUpdateTweetMutation } from 'redux/tweetsApi';\n\nimport logo from '../../assets/logo-go-it.png';\nimport messages from '../../assets/messages.png';\nimport defaultAvatar from '../../assets/default-avatar.png';\nimport Notiflix from 'notiflix';\n\nexport function MarkupTweets(props) {\n  const { user, avatar, followers, tweets, id } = props;\n  const [updateTweet] = useUpdateTweetMutation();\n  const dispatch = useDispatch();\n  const isExist = useSelector(selectUserKeys);\n  const [btnColor, setBtnColor] = useState(\n    isExist.includes(id) ? SECONDARY_COLOR : PRIMARY_COLOR\n  );\n\n  const toggleFollow = followers => {\n    dispatch(toggleUserSubscribe(id));\n    if (isExist.includes(id)) {\n      followers = followers - 1;\n      setBtnColor(PRIMARY_COLOR);\n      Notiflix.Notify.warning(`You unsubscribed to ${user}`);\n    } else {\n      followers = followers + 1;\n      setBtnColor(SECONDARY_COLOR);\n      Notiflix.Notify.success(`You subscribed to ${user}`);\n    }\n\n    dispatch(setFilteredTweets());\n    updateTweet({ user, avatar, followers, tweets, id });\n  };\n\n  const numberOptions = { style: 'decimal', minimumFractionDigits: 0 };\n\n  return (\n    <li className={css.listItem}>\n      <img src={logo} alt=\"goIT\" className={css.logo} />\n      <img src={messages} alt=\"messages\" className={css.messages} />\n\n      <div className={css.line}>\n        <div className={css.circle}>\n          <img\n            src={avatar ? avatar : defaultAvatar}\n            alt=\"avatar\"\n            className={css.avatar}\n          />\n        </div>\n      </div>\n\n      <p className={`${css.title} ${css.tweets}`}>\n        {tweets.toLocaleString('en-US', numberOptions)} TWEETS\n      </p>\n\n      <p className={`${css.title} ${css.followers}`}>\n        {followers.toLocaleString('en-US', numberOptions)} FOLLOWERS\n      </p>\n      <button\n        type=\"button\"\n        className={css.btn}\n        style={{ backgroundColor: btnColor }}\n        onClick={() => {\n          toggleFollow(followers);\n        }}\n      >\n        {isExist.includes(id) ? FOLLOWING : FOLLOW}\n      </button>\n    </li>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"cardsList\":\"RenderTweets_cardsList__8AtxL\"};","import { MarkupTweets } from 'components/MarkupTweets/MarkupTweets';\nimport css from './RenderTweets.module.css';\n\nexport const RenderTweets = props => {\n  const { tweets } = props;\n\n  return (\n    <>\n      <ul className={css.cardsList}>\n        {tweets.map(({ id, ...props }) => {\n          return <MarkupTweets key={id} id={id} {...props}></MarkupTweets>;\n        })}\n      </ul>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PaginationList_wrapper__3+XyQ\",\"list\":\"PaginationList_list__MBkwr\",\"listSideBtns\":\"PaginationList_listSideBtns__J-rK5\",\"btn\":\"PaginationList_btn__GsMPA\",\"sidesBtn\":\"PaginationList_sidesBtn__1qKn8\",\"activeBtn\":\"PaginationList_activeBtn__3Qpe+\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCurrentPage, selectTotalPages } from 'redux/selectors';\nimport {\n  decrementPage,\n  incrementPage,\n  setCurrentPage,\n} from 'redux/sliceUserKey';\nimport css from './PaginationList.module.css';\n\nexport function PaginationList() {\n  const dispatch = useDispatch();\n  let currentPage = useSelector(selectCurrentPage);\n  const totalPages = useSelector(selectTotalPages);\n\n  const pageNumbers = [];\n  for (let i = 1; i <= totalPages; i++) {\n    pageNumbers.push(i);\n  }\n\n  useEffect(() => {\n    if (totalPages < currentPage) {\n      dispatch(setCurrentPage(totalPages));\n    }\n  }, [currentPage, dispatch, totalPages]);\n\n  const pageSelection = pageNumber => {\n    dispatch(setCurrentPage(pageNumber));\n  };\n  const nextPage = () => dispatch(incrementPage());\n  const prevPage = () => dispatch(decrementPage());\n\n  return (\n    <div className={css.wrapper}>\n      <ul className={css.list}>\n        {pageNumbers.map(number => {\n          return (\n            <li key={number}>\n              <button\n                className={\n                  currentPage === number\n                    ? `${css.btn} ${css.activeBtn}`\n                    : css.btn\n                }\n                onClick={() => {\n                  pageSelection(number);\n                }}\n              >\n                {number}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n\n      <ul className={`${css.list} ${css.listSideBtns}`}>\n        <li>\n          <button\n            disabled={currentPage === 1}\n            onClick={prevPage}\n            className={`${css.btn} ${css.sidesBtn}`}\n          >\n            Prev Page\n          </button>\n        </li>\n        <li>\n          <button\n            disabled={currentPage === totalPages}\n            onClick={nextPage}\n            className={`${css.btn} ${css.sidesBtn}`}\n          >\n            Next Page\n          </button>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import { RenderTweets } from 'components/RenderTweets/RenderTweets';\nimport { PaginationList } from 'Layout/PaginationList/PaginationList';\nimport { useSelector } from 'react-redux';\nimport { selectCurrentPage } from 'redux/selectors';\nimport { CARDS_PER_PAGE } from 'Services/variables';\n\nexport const TweetCards = ({ renderingTweets }) => {\n  const currentPage = useSelector(selectCurrentPage);\n  const lastIndex = currentPage * CARDS_PER_PAGE;\n  const firstIndex = lastIndex - CARDS_PER_PAGE;\n  const currentTweets = renderingTweets?.slice(firstIndex, lastIndex);\n\n  return (\n    <>\n      {currentTweets?.length > 0 && <RenderTweets tweets={currentTweets} />}\n      <PaginationList />\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectUsersFilter } from 'redux/selectors';\nimport {\n  setCurrentPage,\n  setFilteredTweets,\n  setUsersFilter,\n} from 'redux/sliceUserKey';\nimport { ALL, FOLLOW, FOLLOWING } from 'Services/variables';\n\nimport Dropdown from 'react-dropdown-select';\nimport Notiflix from 'notiflix';\n\nexport const MyDropdown = () => {\n  const dispatch = useDispatch();\n  const userFilter = useSelector(selectUsersFilter);\n\n  const setFilter = selectedOption => {\n    dispatch(setCurrentPage(1));\n    dispatch(setUsersFilter(selectedOption[0].value));\n    dispatch(setFilteredTweets());\n    Notiflix.Notify.info(`Show ${selectedOption[0].value} users`);\n  };\n\n  const options = [\n    { label: 'Show all', value: ALL },\n    { label: 'Follow', value: FOLLOW },\n    { label: 'Followings', value: FOLLOWING },\n  ];\n\n  return (\n    <>\n      <Dropdown\n        options={options}\n        values={[{ label: userFilter, value: userFilter }]}\n        onChange={setFilter}\n        placeholder=\"Select an option\"\n        style={{ width: '200px' }}\n      />\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"TweetsPage_error__xBxA2\",\"errorTitle\":\"TweetsPage_errorTitle__bp8VK\",\"errorDetails\":\"TweetsPage_errorDetails__slVQv\",\"errorText\":\"TweetsPage_errorText__Jks0v\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { useGetUsersQuery } from 'redux/tweetsApi';\nimport {\n  setAllTweets,\n  setFilteredTweets,\n  setTotalPages,\n  setUsersFilter,\n} from 'redux/sliceUserKey';\nimport { BigPreLoader } from 'Layout/Preloader/PreLoader';\nimport { TweetCards } from 'components/TweetCards/TweetCards';\nimport { selectFilteredTweets, selectUsersFilter } from 'redux/selectors';\nimport { CARDS_PER_PAGE } from 'Services/variables';\nimport { useEffect } from 'react';\nimport { MyDropdown } from 'components/Dropdown/Dropdown';\nimport css from './TweetsPage.module.css';\nimport Notiflix, { Loading } from 'notiflix';\n\nconst TweetsPage = () => {\n  const dataQuery = useGetUsersQuery();\n  const { data: allTweets, isLoading, isError, error } = dataQuery;\n  console.log('TweetsPage >> isLoading:', isLoading);\n\n  const dispatch = useDispatch();\n  const userFilter = useSelector(selectUsersFilter);\n\n  const filteredTweets = useSelector(selectFilteredTweets);\n\n  const renderingTweets = filteredTweets;\n\n  const totalPages =\n    renderingTweets?.length > 0\n      ? Math.ceil(renderingTweets?.length / CARDS_PER_PAGE)\n      : 1;\n\n  useEffect(() => {\n    dispatch(setAllTweets(allTweets));\n    allTweets?.length > 0 && dispatch(setFilteredTweets());\n    dispatch(setUsersFilter(userFilter));\n    dispatch(setTotalPages(totalPages));\n  }, [allTweets, dispatch, isError, isLoading, totalPages, userFilter]);\n\n  return (\n    <div>\n      <h1>Це сторінка твітів</h1>\n\n      <h1>\n        <a href=\"/\"> На головну</a>\n      </h1>\n\n      <h4>Фільтрація</h4>\n      <MyDropdown />\n      {isError && (\n        <div className={css.error}>\n          {Notiflix.Notify.failure(`Увага помилка!`)}\n          <h1 className={css.errorTitle}>Помилка!</h1>\n\n          <h4 className={css.errorDetails}>Деталі помилки:</h4>\n          <p>\n            <b>data:</b> {error.data}\n          </p>\n          <p>\n            <b>error:</b> {error.error}\n          </p>\n          <p>\n            <b>originalStatus:</b> {error.originalStatus}\n          </p>\n          <p>\n            <b>status:</b> {error.status}\n          </p>\n\n          <p className={css.errorText}>\n            Якщо ви бачите \"<b>originalStatus:</b> 429\", то це значить, що ви\n            зробили забагато запитів на сервер.\n          </p>\n          <p>\n            Астанавітєсь! Тобто... Схаменіться! Оновіть сторінку і надалі робіть\n            запити на сервер не так швидко!\n          </p>\n          <p>Наші гноми втомлюються!!!</p>\n        </div>\n      )}\n      {isLoading ? (\n        <>\n          <BigPreLoader />\n          {Loading.dots()}\n        </>\n      ) : (\n        <>\n          <TweetCards renderingTweets={filteredTweets} />\n          {Loading.remove()}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default TweetsPage;\n"],"names":["selectUserKeys","store","storeUserKey","stateUserKeys","selectFilteredTweets","stateFilteredTweets","selectUsersFilter","stateUsersFilter","selectCurrentPage","stateCurrentPage","selectTotalPages","stateTotalPages","MarkupTweets","props","user","avatar","followers","tweets","id","_useUpdateTweetMutati","useUpdateTweetMutation","updateTweet","_slicedToArray","dispatch","useDispatch","isExist","useSelector","_useState","useState","includes","SECONDARY_COLOR","PRIMARY_COLOR","_useState2","btnColor","setBtnColor","numberOptions","style","minimumFractionDigits","_jsxs","className","css","children","_jsx","src","alt","messages","concat","toLocaleString","type","backgroundColor","onClick","toggleUserSubscribe","Notiflix","setFilteredTweets","toggleFollow","FOLLOWING","FOLLOW","RenderTweets","_Fragment","map","_ref","_objectWithoutProperties","_excluded","_objectSpread","PaginationList","currentPage","totalPages","pageNumbers","i","push","useEffect","setCurrentPage","number","pageNumber","disabled","decrementPage","incrementPage","TweetCards","renderingTweets","lastIndex","CARDS_PER_PAGE","firstIndex","currentTweets","slice","length","MyDropdown","userFilter","options","label","value","ALL","Dropdown","values","onChange","selectedOption","setUsersFilter","placeholder","width","dataQuery","useGetUsersQuery","allTweets","data","isLoading","isError","error","console","log","filteredTweets","Math","ceil","setAllTweets","setTotalPages","href","originalStatus","status","BigPreLoader","Loading"],"sourceRoot":""}