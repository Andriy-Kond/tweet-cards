{"version":3,"file":"static/js/403.ac77feee.chunk.js","mappings":"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","sources":["webpack://tweet-cards/./src/components/Error/Error.module.css?141d","components/Error/Error.jsx","webpack://tweet-cards/./src/components/MarkupTweets/MarkupTweets.module.css?a5af","redux/selectors.js","components/MarkupTweets/MarkupTweets.jsx","webpack://tweet-cards/./src/Layout/PaginationList/PaginationList.module.css?f95d","Layout/PaginationList/PaginationList.jsx","webpack://tweet-cards/./src/components/TweetCards/TweetCards.module.css?6d1f","components/TweetCards/TweetCards.jsx","components/Dropdown/Dropdown.jsx","webpack://tweet-cards/./src/pages/Tweets/TweetsPage.module.css?b6bc","pages/Tweets/TweetsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Error_error__9uczQ\",\"errorTitle\":\"Error_errorTitle__6DVEt\",\"errorDetails\":\"Error_errorDetails__nF7YZ\",\"errorText\":\"Error_errorText__8AL-v\"};","import Notiflix from 'notiflix';\nimport css from './Error.module.css';\nexport const Error = ({ error }) => {\n  return (\n    <div className={css.error}>\n      {Notiflix.Notify.failure(`Увага помилка!`)}\n      <h1 className={css.errorTitle}>Помилка!</h1>\n\n      <h4 className={css.errorDetails}>Деталі помилки:</h4>\n      <p>\n        <b>data:</b> {error.data}\n      </p>\n      <p>\n        <b>error:</b> {error.error}\n      </p>\n      <p>\n        <b>originalStatus:</b> {error.originalStatus}\n      </p>\n      <p>\n        <b>status:</b> {error.status}\n      </p>\n\n      <p className={css.errorText}>\n        Якщо ви бачите \"<b>originalStatus:</b> 429\", то це значить, що ви\n        зробили забагато запитів на сервер.\n      </p>\n      <p>\n        Астанавітєсь! Тобто... Схаменіться! Оновіть сторінку і надалі робіть\n        запити на сервер не так швидко!\n      </p>\n      <p>Наші гноми втомлюються!!!</p>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"MarkupTweets_listItem__83Amm\",\"title\":\"MarkupTweets_title__rpG10\",\"tweets\":\"MarkupTweets_tweets__PThrx\",\"followers\":\"MarkupTweets_followers__k8S1N\",\"btn\":\"MarkupTweets_btn__AWbfJ\",\"line\":\"MarkupTweets_line__p0c+m\",\"avatar\":\"MarkupTweets_avatar__xkZQG\",\"circle\":\"MarkupTweets_circle__8szMi\",\"logo\":\"MarkupTweets_logo__E+LPg\",\"messages\":\"MarkupTweets_messages__FbW1I\"};","export const selectFollowingUsers = store =>\n  store.storeUsers.stateFollowingUsers;\nexport const selectFilteredTweets = store =>\n  store.storeUsers.stateFilteredTweets;\nexport const selectDownloadedTweets = store =>\n  store.storeUsers.stateDownloadedTweets;\n\nexport const selectUsersFilter = store => store.storeUsers.stateUsersFilter;\nexport const selectCurrentPage = store => store.storeUsers.stateCurrentPage;\nexport const selectTotalPages = store => store.storeUsers.stateTotalPages;\n\n// new\nexport const selectIsLoading = store => store.storeUsers.stateIsLoading;\nexport const selectIsShowLoadMoreBtn = store =>\n  store.storeUsers.stateIsShowLoadMoreBtn;\nexport const selectIsDisabledLoadMoreBtn = store =>\n  store.storeUsers.stateIsDisabledLoadMoreBtn;\n","import css from './MarkupTweets.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilteredTweets, toggleUserSubscribe } from 'redux/sliceUsers';\nimport { selectFollowingUsers } from 'redux/selectors';\nimport { useState } from 'react';\nimport {\n  FOLLOW,\n  FOLLOWING,\n  PRIMARY_COLOR,\n  SECONDARY_COLOR,\n} from 'Services/variables';\nimport { useUpdateTweetMutation } from 'redux/tweetsApi';\nimport logo from '../../assets/logo-go-it.png';\nimport messages from '../../assets/messages.png';\nimport defaultAvatar from '../../assets/default-avatar.png';\nimport Notiflix from 'notiflix';\n\nexport function MarkupTweets(props) {\n  const { user, avatar, followers, tweets, id } = props;\n  const [\n    updateTweet,\n    // { isLoadingUpd, isError, isSuccess }\n  ] = useUpdateTweetMutation();\n  const dispatch = useDispatch();\n  const followingUsers = useSelector(selectFollowingUsers);\n  const [btnColor, setBtnColor] = useState(\n    followingUsers.includes(id) ? SECONDARY_COLOR : PRIMARY_COLOR\n  );\n\n  const toggleFollow = followers => {\n    dispatch(toggleUserSubscribe(id));\n    if (followingUsers.includes(id)) {\n      followers = followers - 1;\n      setBtnColor(PRIMARY_COLOR);\n      Notiflix.Notify.warning(`You unsubscribed to ${user}`);\n    } else {\n      followers = followers + 1;\n      setBtnColor(SECONDARY_COLOR);\n      Notiflix.Notify.success(`You subscribed to ${user}`);\n    }\n\n    dispatch(setFilteredTweets());\n    updateTweet({ user, avatar, followers, tweets, id });\n  };\n\n  const numberOptions = { style: 'decimal', minimumFractionDigits: 0 };\n\n  return (\n    <li className={css.listItem}>\n      <img\n        src={logo}\n        alt=\"GoIT\"\n        className={css.logo}\n        heigh=\"22px\"\n        width=\"76px\"\n      />\n      <img\n        src={messages}\n        alt=\"messages\"\n        className={css.messages}\n        height=\"168\"\n        width=\"308px\"\n      />\n\n      <div className={css.line}>\n        <div className={css.circle}>\n          <img\n            src={avatar ? avatar : defaultAvatar}\n            alt=\"avatar\"\n            className={css.avatar}\n            height=\"80px\"\n            width=\"80px\"\n          />\n        </div>\n      </div>\n\n      <p className={`${css.title} ${css.tweets}`}>\n        {tweets.toLocaleString('en-US', numberOptions)} TWEETS\n      </p>\n\n      <p className={`${css.title} ${css.followers}`}>\n        {followers.toLocaleString('en-US', numberOptions)} FOLLOWERS\n      </p>\n      <button\n        type=\"button\"\n        className={css.btn}\n        style={{ backgroundColor: btnColor }}\n        onClick={() => {\n          toggleFollow(followers);\n        }}\n      >\n        {followingUsers.includes(id) ? FOLLOWING : FOLLOW}\n      </button>\n    </li>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PaginationList_wrapper__3+XyQ\",\"list\":\"PaginationList_list__MBkwr\",\"listSideBtns\":\"PaginationList_listSideBtns__J-rK5\",\"btn\":\"PaginationList_btn__GsMPA\",\"sidesBtn\":\"PaginationList_sidesBtn__1qKn8\",\"loadMoreBtn\":\"PaginationList_loadMoreBtn__GASRc\",\"activeBtn\":\"PaginationList_activeBtn__3Qpe+\"};","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCurrentPage, selectTotalPages } from 'redux/selectors';\nimport { decrementPage, incrementPage, setCurrentPage } from 'redux/sliceUsers';\n\nimport css from './PaginationList.module.css';\n\nexport function PaginationList() {\n  const dispatch = useDispatch();\n  let currentPage = useSelector(selectCurrentPage);\n  const totalPages = useSelector(selectTotalPages);\n\n  // const pageNumbers = [];\n  // for (let i = 1; i <= totalPages; i++) {\n  //   pageNumbers.push(i);\n  // }\n\n  useEffect(() => {\n    if (totalPages < currentPage) {\n      dispatch(setCurrentPage(totalPages));\n    }\n  }, [currentPage, dispatch, totalPages]);\n\n  // const pageSelection = pageNumber => {\n  //   dispatch(setCurrentPage(pageNumber));\n  // };\n  const nextPage = () => dispatch(incrementPage());\n  const prevPage = () => dispatch(decrementPage());\n\n  return (\n    <div className={css.wrapper}>\n      {/* <ul className={css.list}>\n        {pageNumbers.map(number => {\n          return (\n            <li key={number}>\n              <button\n                className={\n                  currentPage === number\n                    ? `${css.btn} ${css.activeBtn}`\n                    : css.btn\n                }\n                onClick={() => {\n                  pageSelection(number);\n                }}\n              >\n                {number}\n              </button>\n            </li>\n          );\n        })}\n      </ul> */}\n\n      <ul className={`${css.list} ${css.listSideBtns}`}>\n        <li>\n          <button\n            disabled={currentPage === 1}\n            onClick={prevPage}\n            className={`${css.btn} ${css.sidesBtn}`}\n          >\n            Prev Page\n          </button>\n        </li>\n        <li>\n          <button\n            disabled={currentPage === totalPages}\n            onClick={nextPage}\n            className={`${css.btn} ${css.sidesBtn}`}\n          >\n            Next Page\n          </button>\n        </li>\n      </ul>\n\n      <button\n        type=\"button\"\n        id=\"end\"\n        disabled={currentPage === totalPages}\n        onClick={nextPage}\n        className={`${css.btn} ${css.loadMoreBtn}`}\n      >\n        Load more\n      </button>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"cardsList\":\"TweetCards_cardsList__dUZ5R\"};","import { Error } from 'components/Error/Error';\nimport { MarkupTweets } from 'components/MarkupTweets/MarkupTweets';\nimport { PaginationList } from 'Layout/PaginationList/PaginationList';\nimport { PreLoader } from 'Layout/Preloader/PreLoader';\nimport { useSelector } from 'react-redux';\nimport {\n  selectCurrentPage,\n  // selectDownloadedTweets,\n  selectFilteredTweets,\n} from 'redux/selectors';\nimport { CARDS_PER_PAGE } from 'Services/variables';\nimport css from './TweetCards.module.css';\n\nexport const TweetCards = ({ isLoading, isError, error, limitedTweets }) => {\n  const filteredTweets = useSelector(selectFilteredTweets);\n  const currentPage = useSelector(selectCurrentPage);\n  const lastIndex = currentPage * CARDS_PER_PAGE;\n  const currentTweets = filteredTweets?.slice(0, lastIndex);\n  // const downloadedTweets = useSelector(selectDownloadedTweets);\n\n  // const currentTweets = downloadedTweets?.slice(0, lastIndex);\n\n  if (isError) {\n    return <Error error={error} />;\n  }\n\n  return (\n    <>\n      {/* {currentTweets?.length > 0 && <RenderTweets tweets={currentTweets} />} */}\n\n      {/* {currentTweets?.length > 0 && (\n        <ul className={css.cardsList}>\n          {currentTweets.map(({ id, ...props }) => {\n            return <MarkupTweets key={id} id={id} {...props}></MarkupTweets>;\n          })}\n        </ul>\n      )} */}\n\n      {currentTweets?.length > 0 && (\n        <ul className={css.cardsList}>\n          {currentTweets.map(({ id, ...props }) => {\n            return <MarkupTweets key={id} id={id} {...props}></MarkupTweets>;\n          })}\n        </ul>\n      )}\n      {isLoading && <PreLoader />}\n      <PaginationList />\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectUsersFilter } from 'redux/selectors';\nimport {\n  setCurrentPage,\n  setFilteredTweets,\n  setUsersFilter,\n} from 'redux/sliceUsers';\nimport { ALL, FOLLOW, FOLLOWING } from 'Services/variables';\nimport Dropdown from 'react-dropdown-select';\nimport Notiflix from 'notiflix';\n\nexport const MyDropdown = () => {\n  const dispatch = useDispatch();\n  const userFilter = useSelector(selectUsersFilter);\n\n  const setFilter = selectedOption => {\n    dispatch(setCurrentPage(1));\n    dispatch(setUsersFilter(selectedOption[0].value));\n    dispatch(setFilteredTweets());\n    Notiflix.Notify.info(`Show ${selectedOption[0].value} users`);\n  };\n\n  const options = [\n    { label: 'Show all', value: ALL },\n    { label: 'Follow', value: FOLLOW },\n    { label: 'Followings', value: FOLLOWING },\n  ];\n\n  return (\n    <Dropdown\n      options={options}\n      values={[{ label: userFilter, value: userFilter }]}\n      onChange={setFilter}\n      placeholder=\"Select an option\"\n      style={{ maxWidth: '200px', backgroundColor: '#fff' }}\n    />\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"TweetsPage_btn__1n3+8\",\"myDropdown\":\"TweetsPage_myDropdown__ygnSY\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { useGetUsersQuery } from 'redux/tweetsApi';\nimport {\n  // setCurrentPage,\n  setDownloadedTweets,\n  setFilteredTweets,\n  setIsDisabledLoadMoreBtn,\n  setIsLoading,\n  setIsShowLoadMoreBtn,\n  setTotalPages,\n  setUsersFilter,\n} from 'redux/sliceUsers';\nimport { PreLoader } from 'Layout/Preloader/PreLoader';\nimport { TweetCards } from 'components/TweetCards/TweetCards';\nimport {\n  // selectCurrentPage,\n  selectFilteredTweets,\n  selectUsersFilter,\n} from 'redux/selectors';\nimport { CARDS_PER_PAGE } from 'Services/variables';\nimport { useEffect } from 'react';\nimport { MyDropdown } from 'components/Dropdown/Dropdown';\n// import { Error } from 'components/Error/Error';\nimport css from './TweetsPage.module.css';\nimport { Link } from 'react-router-dom';\n// import { useState } from 'react';\n\nconst TweetsPage = () => {\n  const dataQuery = useGetUsersQuery();\n  const { data: limitedTweets, isLoading, isError, error } = dataQuery;\n  const dispatch = useDispatch();\n  const userFilter = useSelector(selectUsersFilter);\n  const filteredTweets = useSelector(selectFilteredTweets);\n  const totalPages =\n    filteredTweets?.length > 0\n      ? Math.ceil(filteredTweets?.length / CARDS_PER_PAGE)\n      : 1;\n\n  useEffect(() => {\n    // dispatch(setAllTweets(allTweets)); // Замінено на setDownloadedTweets\n    dispatch(setDownloadedTweets(limitedTweets));\n    limitedTweets?.length > 0 && dispatch(setFilteredTweets());\n    dispatch(setUsersFilter(userFilter));\n    dispatch(setTotalPages(totalPages));\n\n    dispatch(setIsShowLoadMoreBtn(true));\n    dispatch(setIsDisabledLoadMoreBtn(false));\n    dispatch(setIsLoading(isLoading));\n    if (limitedTweets?.length < CARDS_PER_PAGE) {\n      dispatch(setIsDisabledLoadMoreBtn(true));\n    }\n  }, [limitedTweets, dispatch, totalPages, userFilter, isLoading]);\n\n  return (\n    <div>\n      <Link to=\"/\" className={`btn btn-outline-primary ${css.btn} `}>\n        На головну\n      </Link>\n\n      <div className={css.myDropdown}>\n        <MyDropdown />\n      </div>\n\n      {/* {isError && <Error error={error} />} */}\n      {isLoading && <PreLoader isLoading={isLoading} />}\n\n      <TweetCards\n        isLoading={isLoading}\n        isError={isError}\n        error={error}\n        limitedTweets={limitedTweets}\n      />\n    </div>\n  );\n};\n\nexport default TweetsPage;\n"],"names":["Error","_ref","error","_jsxs","className","css","children","Notiflix","_jsx","data","originalStatus","status","selectFollowingUsers","store","storeUsers","stateFollowingUsers","selectFilteredTweets","stateFilteredTweets","selectUsersFilter","stateUsersFilter","selectCurrentPage","stateCurrentPage","selectTotalPages","stateTotalPages","MarkupTweets","props","user","avatar","followers","tweets","id","_useUpdateTweetMutati","useUpdateTweetMutation","updateTweet","_slicedToArray","dispatch","useDispatch","followingUsers","useSelector","_useState","useState","includes","SECONDARY_COLOR","PRIMARY_COLOR","_useState2","btnColor","setBtnColor","numberOptions","style","minimumFractionDigits","src","alt","heigh","width","messages","height","concat","toLocaleString","type","backgroundColor","onClick","toggleUserSubscribe","setFilteredTweets","toggleFollow","FOLLOWING","FOLLOW","PaginationList","currentPage","totalPages","useEffect","setCurrentPage","nextPage","incrementPage","disabled","decrementPage","TweetCards","isLoading","isError","filteredTweets","limitedTweets","lastIndex","CARDS_PER_PAGE","currentTweets","slice","_Fragment","length","map","_ref2","_objectWithoutProperties","_excluded","_objectSpread","PreLoader","MyDropdown","userFilter","options","label","value","ALL","Dropdown","values","onChange","selectedOption","setUsersFilter","placeholder","maxWidth","dataQuery","useGetUsersQuery","Math","ceil","setDownloadedTweets","setTotalPages","setIsShowLoadMoreBtn","setIsDisabledLoadMoreBtn","setIsLoading","Link","to"],"sourceRoot":""}