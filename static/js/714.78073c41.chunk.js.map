{"version":3,"file":"static/js/714.78073c41.chunk.js","mappings":"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","sources":["webpack://tweet-cards/./src/components/MarkupTweets/MarkupTweets.module.css?a5af","redux/selectors.js","components/MarkupTweets/MarkupTweets.jsx","webpack://tweet-cards/./src/components/RenderTweets/RenderTweets.module.css?ae95","components/RenderTweets/RenderTweets.jsx","webpack://tweet-cards/./src/Layout/PaginationList/PaginationList.module.css?f95d","Layout/PaginationList/PaginationList.jsx","components/TweetCards/TweetCards.jsx","components/Dropdown/Dropdown.jsx","webpack://tweet-cards/./src/components/Error/Error.module.css?141d","components/Error/Error.jsx","webpack://tweet-cards/./src/pages/Tweets/TweetsPage.module.css?b6bc","pages/Tweets/TweetsPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"listItem\":\"MarkupTweets_listItem__83Amm\",\"title\":\"MarkupTweets_title__rpG10\",\"tweets\":\"MarkupTweets_tweets__PThrx\",\"followers\":\"MarkupTweets_followers__k8S1N\",\"btn\":\"MarkupTweets_btn__AWbfJ\",\"line\":\"MarkupTweets_line__p0c+m\",\"avatar\":\"MarkupTweets_avatar__xkZQG\",\"circle\":\"MarkupTweets_circle__8szMi\",\"logo\":\"MarkupTweets_logo__E+LPg\",\"messages\":\"MarkupTweets_messages__FbW1I\"};","export const selectUserKeys = store => store.storeUserKey.stateUserKeys;\nexport const selectFilteredTweets = store =>\n  store.storeUserKey.stateFilteredTweets;\nexport const selectAllTweets = store => store.storeUserKey.stateAllTweets;\nexport const selectUsersFilter = store => store.storeUserKey.stateUsersFilter;\nexport const selectCurrentPage = store => store.storeUserKey.stateCurrentPage;\nexport const selectTotalPages = store => store.storeUserKey.stateTotalPages;\n","import css from './MarkupTweets.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilteredTweets, toggleUserSubscribe } from 'redux/sliceUserKey';\nimport { selectUserKeys } from 'redux/selectors';\nimport { useState } from 'react';\nimport {\n  FOLLOW,\n  FOLLOWING,\n  PRIMARY_COLOR,\n  SECONDARY_COLOR,\n} from 'Services/variables';\nimport { useUpdateTweetMutation } from 'redux/tweetsApi';\nimport logo from '../../assets/logo-go-it.png';\nimport messages from '../../assets/messages.png';\nimport defaultAvatar from '../../assets/default-avatar.png';\nimport Notiflix from 'notiflix';\n\nexport function MarkupTweets(props) {\n  const { user, avatar, followers, tweets, id } = props;\n  const [updateTweet] = useUpdateTweetMutation();\n  const dispatch = useDispatch();\n  const isExist = useSelector(selectUserKeys);\n  const [btnColor, setBtnColor] = useState(\n    isExist.includes(id) ? SECONDARY_COLOR : PRIMARY_COLOR\n  );\n\n  const toggleFollow = followers => {\n    dispatch(toggleUserSubscribe(id));\n    if (isExist.includes(id)) {\n      followers = followers - 1;\n      setBtnColor(PRIMARY_COLOR);\n      Notiflix.Notify.warning(`You unsubscribed to ${user}`);\n    } else {\n      followers = followers + 1;\n      setBtnColor(SECONDARY_COLOR);\n      Notiflix.Notify.success(`You subscribed to ${user}`);\n    }\n\n    dispatch(setFilteredTweets());\n    updateTweet({ user, avatar, followers, tweets, id });\n  };\n\n  const numberOptions = { style: 'decimal', minimumFractionDigits: 0 };\n\n  return (\n    <li className={css.listItem}>\n      <img src={logo} alt=\"GoIT\" className={css.logo} />\n      <img src={messages} alt=\"messages\" className={css.messages} />\n\n      <div className={css.line}>\n        <div className={css.circle}>\n          <img\n            src={avatar ? avatar : defaultAvatar}\n            alt=\"avatar\"\n            className={css.avatar}\n          />\n        </div>\n      </div>\n\n      <p className={`${css.title} ${css.tweets}`}>\n        {tweets.toLocaleString('en-US', numberOptions)} TWEETS\n      </p>\n\n      <p className={`${css.title} ${css.followers}`}>\n        {followers.toLocaleString('en-US', numberOptions)} FOLLOWERS\n      </p>\n      <button\n        type=\"button\"\n        className={css.btn}\n        style={{ backgroundColor: btnColor }}\n        onClick={() => {\n          toggleFollow(followers);\n        }}\n      >\n        {isExist.includes(id) ? FOLLOWING : FOLLOW}\n      </button>\n    </li>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"cardsList\":\"RenderTweets_cardsList__8AtxL\"};","import { MarkupTweets } from 'components/MarkupTweets/MarkupTweets';\nimport css from './RenderTweets.module.css';\n\nexport const RenderTweets = props => {\n  const { tweets } = props;\n\n  return (\n    <ul className={css.cardsList}>\n      {tweets.map(({ id, ...props }) => {\n        return <MarkupTweets key={id} id={id} {...props}></MarkupTweets>;\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"PaginationList_wrapper__3+XyQ\",\"list\":\"PaginationList_list__MBkwr\",\"listSideBtns\":\"PaginationList_listSideBtns__J-rK5\",\"btn\":\"PaginationList_btn__GsMPA\",\"sidesBtn\":\"PaginationList_sidesBtn__1qKn8\",\"loadMoreBtn\":\"PaginationList_loadMoreBtn__GASRc\",\"activeBtn\":\"PaginationList_activeBtn__3Qpe+\"};","// import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectCurrentPage, selectTotalPages } from 'redux/selectors';\nimport {\n  // decrementPage,\n  incrementPage,\n  // setCurrentPage,\n} from 'redux/sliceUserKey';\n// import { useGetUsersQuery } from 'redux/tweetsApi';\nimport css from './PaginationList.module.css';\n\nexport function PaginationList() {\n  const dispatch = useDispatch();\n  let currentPage = useSelector(selectCurrentPage);\n  const totalPages = useSelector(selectTotalPages);\n\n  // const pageNumbers = [];\n  // for (let i = 1; i <= totalPages; i++) {\n  //   pageNumbers.push(i);\n  // }\n\n  // useEffect(() => {\n  //   if (totalPages < currentPage) {\n  //     dispatch(setCurrentPage(totalPages));\n  //   }\n  // }, [currentPage, dispatch, totalPages]);\n\n  // const pageSelection = pageNumber => {\n  //   dispatch(setCurrentPage(pageNumber));\n  // };\n\n  // const nextPage = () => dispatch(incrementPage());\n  // const prevPage = () => dispatch(decrementPage());\n\n  // useEffect(() => {\n  //   if (totalPages < currentPage) {\n  //     dispatch(setCurrentPage(totalPages));\n  //   }\n  // }, [currentPage, dispatch, totalPages]);\n\n  // const dataQuery = useGetUsersQuery();\n  // const { data: allTweets, isLoading, isError, error } = dataQuery;\n\n  const nextPage = () => {\n    dispatch(incrementPage());\n  };\n\n  return (\n    <div className={css.wrapper}>\n      {/* <ul className={css.list}>\n        {pageNumbers.map(number => {\n          return (\n            <li key={number}>\n              <button\n                className={\n                  currentPage === number\n                    ? `${css.btn} ${css.activeBtn}`\n                    : css.btn\n                }\n                onClick={() => {\n                  pageSelection(number);\n                }}\n              >\n                {number}\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n\n      <ul className={`${css.list} ${css.listSideBtns}`}>\n        <li>\n          <button\n            disabled={currentPage === 1}\n            onClick={prevPage}\n            className={`${css.btn} ${css.sidesBtn}`}\n          >\n            Prev Page\n          </button>\n        </li>\n        <li>\n          <button\n            disabled={currentPage === totalPages}\n            onClick={nextPage}\n            className={`${css.btn} ${css.sidesBtn}`}\n          >\n            Next Page\n          </button>\n        </li>\n      </ul> */}\n\n      <button\n        type=\"button\"\n        id=\"end\"\n        disabled={currentPage === totalPages}\n        onClick={nextPage}\n        className={`${css.btn} ${css.loadMoreBtn}`}\n      >\n        Load more\n      </button>\n    </div>\n  );\n}\n","import { RenderTweets } from 'components/RenderTweets/RenderTweets';\nimport { PaginationList } from 'Layout/PaginationList/PaginationList';\nimport { useSelector } from 'react-redux';\nimport { selectCurrentPage, selectFilteredTweets } from 'redux/selectors';\nimport { CARDS_PER_PAGE } from 'Services/variables';\n\nexport const TweetCards = () => {\n  const filteredTweets = useSelector(selectFilteredTweets);\n  const currentPage = useSelector(selectCurrentPage);\n  const lastIndex = currentPage * CARDS_PER_PAGE;\n  const currentTweets = filteredTweets?.slice(1, lastIndex + 1);\n\n  return (\n    <>\n      {currentTweets?.length > 0 && <RenderTweets tweets={currentTweets} />}\n      <PaginationList />\n    </>\n  );\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { selectUsersFilter } from 'redux/selectors';\nimport {\n  setCurrentPage,\n  setFilteredTweets,\n  setUsersFilter,\n} from 'redux/sliceUserKey';\nimport { ALL, FOLLOW, FOLLOWING } from 'Services/variables';\nimport Dropdown from 'react-dropdown-select';\nimport Notiflix from 'notiflix';\n\nexport const MyDropdown = () => {\n  const dispatch = useDispatch();\n  const userFilter = useSelector(selectUsersFilter);\n\n  const setFilter = selectedOption => {\n    dispatch(setCurrentPage(1));\n    dispatch(setUsersFilter(selectedOption[0].value));\n    dispatch(setFilteredTweets());\n    Notiflix.Notify.info(`Show ${selectedOption[0].value} users`);\n  };\n\n  const options = [\n    { label: 'Show all', value: ALL },\n    { label: 'Follow', value: FOLLOW },\n    { label: 'Followings', value: FOLLOWING },\n  ];\n\n  return (\n    <Dropdown\n      options={options}\n      values={[{ label: userFilter, value: userFilter }]}\n      onChange={setFilter}\n      placeholder=\"Select an option\"\n      style={{ width: '200px' }}\n    />\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"Error_error__9uczQ\",\"errorTitle\":\"Error_errorTitle__6DVEt\",\"errorDetails\":\"Error_errorDetails__nF7YZ\",\"errorText\":\"Error_errorText__8AL-v\"};","import Notiflix from 'notiflix';\nimport css from './Error.module.css';\nexport const Error = ({ error }) => {\n  return (\n    <div className={css.error}>\n      {Notiflix.Notify.failure(`Увага помилка!`)}\n      <h1 className={css.errorTitle}>Помилка!</h1>\n\n      <h4 className={css.errorDetails}>Деталі помилки:</h4>\n      <p>\n        <b>data:</b> {error.data}\n      </p>\n      <p>\n        <b>error:</b> {error.error}\n      </p>\n      <p>\n        <b>originalStatus:</b> {error.originalStatus}\n      </p>\n      <p>\n        <b>status:</b> {error.status}\n      </p>\n\n      <p className={css.errorText}>\n        Якщо ви бачите \"<b>originalStatus:</b> 429\", то це значить, що ви\n        зробили забагато запитів на сервер.\n      </p>\n      <p>\n        Астанавітєсь! Тобто... Схаменіться! Оновіть сторінку і надалі робіть\n        запити на сервер не так швидко!\n      </p>\n      <p>Наші гноми втомлюються!!!</p>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"TweetsPage_btn__1n3+8\",\"myDropdown\":\"TweetsPage_myDropdown__ygnSY\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { useGetUsersQuery } from 'redux/tweetsApi';\nimport {\n  setAllTweets,\n  setFilteredTweets,\n  setTotalPages,\n  setUsersFilter,\n} from 'redux/sliceUserKey';\nimport { PreLoader } from 'Layout/Preloader/PreLoader';\nimport { TweetCards } from 'components/TweetCards/TweetCards';\nimport { selectFilteredTweets, selectUsersFilter } from 'redux/selectors';\nimport { CARDS_PER_PAGE } from 'Services/variables';\nimport { useEffect } from 'react';\nimport { MyDropdown } from 'components/Dropdown/Dropdown';\nimport { Error } from 'components/Error/Error';\nimport css from './TweetsPage.module.css';\nimport { Link } from 'react-router-dom';\n\nconst TweetsPage = () => {\n  const dataQuery = useGetUsersQuery();\n  const { data: allTweets, isLoading, isError, error } = dataQuery;\n  const dispatch = useDispatch();\n  const userFilter = useSelector(selectUsersFilter);\n  const filteredTweets = useSelector(selectFilteredTweets);\n  const totalPages =\n    filteredTweets?.length > 0\n      ? Math.ceil(filteredTweets?.length / CARDS_PER_PAGE)\n      : 1;\n\n  useEffect(() => {\n    dispatch(setAllTweets(allTweets));\n    allTweets?.length > 0 && dispatch(setFilteredTweets());\n    dispatch(setUsersFilter(userFilter));\n    dispatch(setTotalPages(totalPages));\n  }, [allTweets, dispatch, isError, isLoading, totalPages, userFilter]);\n\n  return (\n    <div>\n      <Link to=\"/\" className={`btn btn-outline-primary ${css.btn} `}>\n        На головну\n      </Link>\n\n      <div className={css.myDropdown}>\n        <MyDropdown />\n      </div>\n      {isError && <Error error={error} />}\n      {isLoading ? <PreLoader isLoading={isLoading} /> : <TweetCards />}\n    </div>\n  );\n};\n\nexport default TweetsPage;\n"],"names":["selectUserKeys","store","storeUserKey","stateUserKeys","selectFilteredTweets","stateFilteredTweets","selectUsersFilter","stateUsersFilter","selectCurrentPage","stateCurrentPage","selectTotalPages","stateTotalPages","MarkupTweets","props","user","avatar","followers","tweets","id","_useUpdateTweetMutati","useUpdateTweetMutation","updateTweet","_slicedToArray","dispatch","useDispatch","isExist","useSelector","_useState","useState","includes","SECONDARY_COLOR","PRIMARY_COLOR","_useState2","btnColor","setBtnColor","numberOptions","style","minimumFractionDigits","_jsxs","className","css","children","_jsx","src","alt","messages","concat","toLocaleString","type","backgroundColor","onClick","toggleUserSubscribe","Notiflix","setFilteredTweets","toggleFollow","FOLLOWING","FOLLOW","RenderTweets","map","_ref","_objectWithoutProperties","_excluded","_objectSpread","PaginationList","currentPage","totalPages","disabled","incrementPage","TweetCards","filteredTweets","lastIndex","CARDS_PER_PAGE","currentTweets","slice","_Fragment","length","MyDropdown","userFilter","options","label","value","ALL","Dropdown","values","onChange","selectedOption","setCurrentPage","setUsersFilter","placeholder","width","Error","error","data","originalStatus","status","dataQuery","useGetUsersQuery","allTweets","isLoading","isError","Math","ceil","useEffect","setAllTweets","setTotalPages","Link","to","PreLoader"],"sourceRoot":""}